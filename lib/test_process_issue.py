import unittest
from unittest.mock import patch, Mock
from .process_issue import process_issue
from github.Issue import Issue
from .openai import openai_client
from .github import repo

class TestProcessIssue(unittest.TestCase):
    @patch('github.Issue.Issue')
    def test_process_issue(self, Issue):
        mock_create = patch.object(openai_client.chat.completions, 'create')
        mock_create.return_value = {
            'choices': [
                {
                    'message': {
                        'content': 'BEGIN FILE test.txt\nThis is a test file.\nEND FILE test.txt'
                    }
                }
            ]
        }

        issue = Issue()
        issue.title = 'Test Issue'
        issue.body = 'This is a test issue'
        issue.number = 1

        mock_get_issues = patch.object(repo, 'get_issues')
        mock_get_create_pull = patch.object(repo, 'create_pull')

        process_issue(issue)
        mock_get_issues.assert_called_once()
        mock_create.assert_called_once_with(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "user",
                    "content": "Title: Test Issue\nDescription: This is a test issue\nExisting files:"
                }
            ]
        )
        mock_create_pull.assert_called_once_with(
            title='Test Issue',
            body='Resolves #1\n\nThis pull request was automatically generated by the GitHub bot.',
            head='issue-1',
            base='main',
            files={
                'test.txt': 'This is a test file.'
            }
        )

if __name__ == '__main__':
    unittest.main()
